# Development Dockerfile - optimized for live code changes
FROM php:8.3-apache

# Set working directory
WORKDIR /var/www/html

# Install system dependencies
RUN apt-get update && apt-get install -y \
	git \
	curl \
	libpng-dev \
	libonig-dev \
	libxml2-dev \
	zip \
	unzip \
	libzip-dev \
	libfreetype6-dev \
	libjpeg62-turbo-dev \
	&& rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN apt-get update && apt-get install -y libicu-dev \
	&& docker-php-ext-configure gd --with-freetype --with-jpeg \
	&& docker-php-ext-configure intl \
	&& docker-php-ext-install -j$(nproc) gd pdo_mysql mbstring exif pcntl bcmath zip intl \
	&& rm -rf /var/lib/apt/lists/*

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Install Node.js 20
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
	&& apt-get install -y nodejs \
	&& rm -rf /var/lib/apt/lists/*

# Enable Apache modules
RUN a2enmod rewrite headers

# Configure Apache for port 8182
RUN echo 'ServerName localhost' >> /etc/apache2/apache2.conf && \
	sed -i 's/Listen 80/Listen 8182/g' /etc/apache2/ports.conf && \
	echo '<VirtualHost *:8182>\n\
	DocumentRoot /var/www/html/public\n\
	<Directory /var/www/html/public>\n\
		Options Indexes FollowSymLinks\n\
		AllowOverride All\n\
		Require all granted\n\
	</Directory>\n\
	ErrorLog ${APACHE_LOG_DIR}/error.log\n\
	CustomLog ${APACHE_LOG_DIR}/access.log combined\n\
</VirtualHost>' > /etc/apache2/sites-available/000-default.conf

# Copy application files
COPY . .

# Install dependencies for development
RUN composer install --optimize-autoloader --no-interaction

# Install Node.js dependencies
RUN npm install

# Build frontend assets
RUN npm run build

# Create required directories (will be mounted from host)
RUN mkdir -p storage/app/public \
	storage/framework/cache \
	storage/framework/sessions \
	storage/framework/views \
	storage/logs \
	bootstrap/cache

# Set permissions
RUN chown -R www-data:www-data /var/www/html && \
	chmod -R 755 /var/www/html/storage && \
	chmod -R 755 /var/www/html/bootstrap/cache

# Create development startup script
COPY docker-entrypoint.dev.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.dev.sh

EXPOSE 8182

ENTRYPOINT ["docker-entrypoint.dev.sh"]
